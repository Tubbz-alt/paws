import tifffile
from os.path import splitext
from collections import OrderedDict

from ...operation import Operation
from ... import optools

class ReadImageAndHeader_SSRL15(Operation):
    """
    Read an image and header generated by beamline 1-5 at SSRL.
    Returns ndarray image and dictionary header.
    """

    def __init__(self):
        input_names = ['tif_path']
        output_names = ['image_data', 'image_header']
        super(ReadImageAndHeader_SSRL15, self).__init__(input_names, output_names)
        self.input_doc['tif_path'] = str('path to a tif file image produced by beamline 1-5 at SSRL. '
        + 'It is expected that a .txt header file will be in the same directory as this .tif file.')
        self.input_src['tif_path'] = optools.fs_input
        self.input_type['tif_path'] = optools.path_type
        self.output_doc['image_data'] = 'the image pixel data as an ndarray'
        self.output_doc['image_header'] = 'the header file as a python dictionary'

    def run(self):
        tif_path = self.inputs['tif_path']
        hdr_file_name = splitext(tif_path)[0] + '.txt'
        self.outputs['image_data'] = tifffile.imread(tif_path)
        d = OrderedDict()
        for l in open(hdr_file_name,'r').readlines():
            try:
                if not l.strip() == '' and not l.strip()[0] == '#':
                    kvs = l.split(',')
                    # special case for the string headers on line 1
                    if not kvs[0].find('User') == -1:
                        u_str = kvs[0].split('User:')[1].strip()
                        t_str = kvs[1].split('time:')[1].strip()
                        d['User'] = u_str
                        d['time'] = t_str
                    # and filter out the redundant temperature line
                    elif not (len(kvs)==1 and kvs[0].strip()[-1]=='C'):
                        for kv in kvs:
                            kv_arr = kv.split('=')
                            d[kv_arr[0].strip()] = float(kv_arr[1].strip())
            except e:
                d['ERROR'] = e.message
        self.outputs['image_header'] = d

