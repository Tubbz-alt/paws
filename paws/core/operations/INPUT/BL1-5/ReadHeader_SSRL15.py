from collections import OrderedDict

from ...operation import Operation
from ... import optools

class ReadHeader_SSRL15(Operation):
    """
    Read a .txt image header generated by beamline 1-5 at SSRL.
    Returns header data in a dictionary.
    """

    def __init__(self):
        input_names = ['file_path']
        output_names = ['header_data']
        super(ReadHeader_SSRL15, self).__init__(input_names, output_names)
        self.input_doc['file_path'] = 'path to a .txt file containing an image header generated by beam line 1-5 at SSRL'
        self.input_src['file_path'] = optools.fs_input
        self.input_type['file_path'] = optools.path_type
        self.output_doc['header_data'] = 'a dictionary containing the data read from the header file'

    def run(self):
        p = self.inputs['file_path']
        d = OrderedDict()
        for l in open(p,'r').readlines():
            try:
                if not l.strip() == '' and not l.strip()[0] == '#':
                    kvs = l.split(',')
                    # special case for the string headers on line 1
                    if not kvs[0].find('User') == -1:
                        u_str = kvs[0].split('User:')[1].strip()
                        t_str = kvs[1].split('time:')[1].strip()
                        d['User'] = u_str
                        d['time'] = t_str
                    # and filter out the redundant temperature line
                    elif not (len(kvs)==1 and kvs[0].strip()[-1]=='C'):
                        for kv in kvs:
                            kv_arr = kv.split('=')
                            d[kv_arr[0].strip()] = float(kv_arr[1].strip())
            except e:
                d['ERROR'] = e.message
        self.outputs['header_data'] = d

