from collections import OrderedDict
import copy

from paws import pawstools

from paws.workflows.Workflow import Workflow 
from paws.workflows.IO.BL15 import ReadTimeSeries as ReadTimeSeries2
from paws.workflows.IO.BL15.LEGACY.ReadBatch import ReadBatch

# NOTE: this workflow is for reading samples
# that were saved with text headers generated by SPEC 

inputs = copy.deepcopy(ReadTimeSeries2.inputs) 
outputs = copy.deepcopy(ReadTimeSeries2.outputs) 

class ReadTimeSeries(Workflow):

    def __init__(self):
        super(ReadTimeSeries,self).__init__(inputs,outputs)
        self.ts_read_wf = ReadTimeSeries2.ReadTimeSeries()
        # swap out the read wf 
        self.ts_read_wf.add_operation('read_batch',ReadBatch())

    def run(self):
        self.ts_read_wf.ops_enabled.update(self.ops_enabled) 
        self.outputs = self.ts_read_wf.run_with(**self.inputs)
        return self.outputs

