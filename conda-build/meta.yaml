{% set name = "pypaws" %}
{% set version = "0.8.9" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "2d8c4952295805d1623fe66f8e8e362b9201e4086d773ae2898747450e336b5c" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  noarch: python
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
    - pyyaml
  run:
    - python
    - pyyaml

test:
  imports:
    - paws
    - paws.core
    - paws.core.models
    - paws.core.operations
    - paws.core.operations.EXECUTION
    - paws.core.operations.IO
    - paws.core.operations.IO.BL15
    - paws.core.operations.IO.BL42
    - paws.core.operations.IO.CALIBRATION
    - paws.core.operations.IO.CSV
    - paws.core.operations.IO.DAT
    - paws.core.operations.IO.FILESYSTEM
    - paws.core.operations.IO.IMAGE
    - paws.core.operations.IO.MISC
    - paws.core.operations.IO.MODELS
    - paws.core.operations.IO.MODELS.SAXS
    - paws.core.operations.IO.NUMPY
    - paws.core.operations.IO.PIF
    - paws.core.operations.IO.SPEC
    - paws.core.operations.IO.YAML
    - paws.core.operations.PACKAGING
    - paws.core.operations.PACKAGING.BATCH
    - paws.core.operations.PACKAGING.BL15
    - paws.core.operations.PACKAGING.CALIBRATION
    - paws.core.operations.PACKAGING.PIF
    - paws.core.operations.PROCESSING
    - paws.core.operations.PROCESSING.BACKGROUND
    - paws.core.operations.PROCESSING.BASIC
    - paws.core.operations.PROCESSING.CLASSIFICATION
    - paws.core.operations.PROCESSING.FITTING
    - paws.core.operations.PROCESSING.INTEGRATION
    - paws.core.operations.PROCESSING.MODELING
    - paws.core.operations.PROCESSING.REGRESSION
    - paws.core.operations.PROCESSING.SMOOTHING
    - paws.core.operations.PROCESSING.ZINGERS
    - paws.core.operations.TESTS
    - paws.core.operations.TMP
    - paws.core.plugins
    - paws.core.workflows
    - paws.core.workflows.SAXS
    - paws.core.workflows.SAXS.BL15
    - paws.core.workflows.WAXS
    - paws.core.workflows.WAXS.BL15
    - paws.core.workflows.XICAM
    - tests

about:
  home: https://github.com/slaclab/paws/
  license: BSD License
  license_family: BSD
  license_file: ''
  summary: the Platform for Automated Workflows by SSRL
  description: "paws: the Platform for Automated Workflows by SSRL \n==================================================\n\n\nIntroduction\n------------\n\n`paws` stands for the Platform for Automated Workflows\
    \ by SSRL.\nIt was conceived to serve as a lean and modular\nworkflow manager for spectral data.\n\n`paws` interfaces fluidly\nwith an ever-growing number of packages \nand provide easy ways for users\
    \ \nto add their own operations,\nas Python modules following a simple template.\n\nAfter a `paws` workflow has been constructed, \nit can be easily moved between machines, processes, or threads,\n\
    so that it can be used equally well \nfor scripting on personal computers,\nfor processing behind graphical applications,\nor for remote execution on clusters or data centers.\n\nDisclaimer: `paws`\
    \ is neither the first nor the most sophisticated\nway to build and manage data processing workflows.\nIt was built to provide a certain degree of modularity\nthat was required at the time of development\n\
    but was not so easy to find in the community.\n\nThe core modules of `paws` \nare pure Python and depend only on PyYAML.\n\nA separate package, `qtpaws`, provides a `Qt`-based GUI for `paws`.\n`qtpaws`\
    \ tries to provide the same functionalities as the pure Python API,\nalong with interactive viewing of the workflow results in real time.\n\n\nDocumentation\n-------------\n\nThe documentation for `paws`\
    \ is hosted by readthedocs.org:\n`http://paws.readthedocs.io/en/latest/`.\nThis documentation is continually under development.\nPlease contact the developers at `paws-developers@slac.stanford.edu`\n\
    if the documentation fails to answer your questions.\n\n\nAPI Examples\n------------\n\nThe following are examples that explore \nthe capabilities of the `paws` API.\n\nTODO: write new examples to reflect\
    \ the new API.\n\n\nInstallation\n------------\n\nThe full `paws` package is available on PyPI.\nTo install in an existing Python environment, invoke `pip`:\n`pip install pypaws`\n\nAll of the dependencies\
    \ of the `paws` Operations \nare not declared as dependencies of `paws`.\nThis keeps the Python environment relatively lean\nand avoids installation overhead,\nbut it means that users will have to prepare\
    \ their\nenvironments for the Operations they want to use.\n\nThe documentation of `paws` includes instructions\nfor installing the dependencies of each Operation.\nNOTE: this is currently false. \n\
    TODO: add this to the docs. \n\n\nAttribution\n-----------\n\n`paws` was written at SSRL by Chris Tassone's research group.\nIf you use `paws` in your published research, \na citation would be appreciated.\n\
    \nBefore citing `paws`, it is of primary importance that you cite \nthe authors of the original work that produced your results: \nthis is almost certainly separate from the authors of `paws`.\nCitations\
    \ for your specific operations might be found\nby in the `paws` documentation.\nIf you have trouble finding proper citations,\nplease contact us at `paws-developers@slac.stanford.edu`,\nand we will\
    \ do our best to help.\n\n\nContribution\n------------\n\nContribution to `paws` is encouraged and appreciated.\nGet in touch with the `paws` development team\nat `paws-developers@slac.stanford.edu`.\n\
    \n\nLicense\n-------\n\nThe 3-clause BSD-like license attached to this software \ncan be found in the LICENSE file in the source code root directory."
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
