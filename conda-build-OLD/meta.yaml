{% set name = "pypaws" %}
{% set version = "0.8.4" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "ed4560233b2855a0ffb7c674992fe3fa603b09ab1ea42ac6f0b73f1c9858af1e" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  entry_points:
    - paws=main:main

requirements:
  build:
    - python
    - setuptools
    - pyyaml
  run:
    - python
    - pyyaml
    - pyside

test:
  imports:
    - paws
    - paws.api
    - paws.core
    - paws.core.models
    - paws.core.operations
    - paws.core.operations.EXECUTION
    - paws.core.operations.IO
    - paws.core.operations.IO.BL15
    - paws.core.operations.IO.BL42
    - paws.core.operations.IO.CALIBRATION
    - paws.core.operations.IO.CSV
    - paws.core.operations.IO.DAT
    - paws.core.operations.IO.FILESYSTEM
    - paws.core.operations.IO.IMAGE
    - paws.core.operations.IO.MISC
    - paws.core.operations.IO.MODELS
    - paws.core.operations.IO.MODELS.SAXS
    - paws.core.operations.IO.NUMPY
    - paws.core.operations.IO.PIF
    - paws.core.operations.IO.YAML
    - paws.core.operations.PACKAGING
    - paws.core.operations.PACKAGING.BATCH
    - paws.core.operations.PACKAGING.BL15
    - paws.core.operations.PACKAGING.CALIBRATION
    - paws.core.operations.PACKAGING.PIF
    - paws.core.operations.PROCESSING
    - paws.core.operations.PROCESSING.BACKGROUND
    - paws.core.operations.PROCESSING.BASIC
    - paws.core.operations.PROCESSING.INTEGRATION
    - paws.core.operations.PROCESSING.PEAKS
    - paws.core.operations.PROCESSING.SAXS
    - paws.core.operations.PROCESSING.SMOOTHING
    - paws.core.operations.PROCESSING.ZINGERS
    - paws.core.operations.TESTS
    - paws.core.operations.TMP
    - paws.core.plugins
    - paws.core.workflows
    - paws.core.workflows.SAXS
    - paws.core.workflows.XICAM
    - paws.qt
    - paws.qt.widgets
    - paws.qt.widgets.plugin_widgets
    - tests
  commands:
    - paws --help

about:
  home: https://github.com/slaclab/paws/
  license: BSD License
  license_family: BSD
  license_file: ''
  summary: the Platform for Automated Workflows by SSRL
  description: "paws: the Platform for Automated Workflows by SSRL \n==================================================\n\n\nIntroduction\n------------\n\n`paws` stands for the Platform for Automated Workflows\
    \ by SSRL.\nIt was conceived to serve as a lean and modular\nworkflow manager for image-like data.\nWhile there are many Python packages \nproviding for a wide variety of processing tasks,\nwe are often\
    \ faced with a need to bring several packages together,\nand then to add some home-built scripts as well, \nto complete a data processing workflow.\n`paws` was designed to make this process easy,\n\
    by providing interfaces to an ever-growing number of existing packages \nand providing easy ways for users to add their own operations.\nOccasionally, we have need of an operation \nthat is not provided\
    \ by a Python package that we know of.\nIn these rare cases, we have developed original operations within PAWS,\nbut such operations intend to live in a lower-level package\nas soon as they are mature.\n\
    \nAfter a `paws` workflow has been constructed, \nit can be easily moved between machines, processes, or threads,\nso that it can be used equally well \nfor scripting or data processing on personal\
    \ computers,\nfor data processing behind other graphical applications,\nor for remote execution on clusters or data centers.\n`paws` is currently under development: \nnothing has been tested or optimized.\n\
    \nDisclaimer: `paws` is neither the first nor the most sophisticated\nway to build and manage data processing workflows.\nIt is, however, very modular and extensive.\nIt was built to serve equally well\
    \ as a pure Python package,\nas a standalone application, or as a backend for other applications,\nand it was built to be easily extended to handle new processing workflows.\n\nThe core modules of `paws`\
    \ \nare pure Python and depend only on PyYAML.\n`paws` exposes a simple API\nthat interacts with these core modules,\nfor users to write scripts or applications based on `paws`.\n\nThe gui modules of\
    \ `paws`\nare built on the `PySide` `Qt` bindings,\nand generally aim to provide \nfunctionality equivalent to the pure Python API,\nalong with interactive viewing of the workflow results in real time.\n\
    \n\nDocumentation\n-------------\n\nThe documentation for `paws` is hosted by readthedocs.org:\n`http://paws.readthedocs.io/en/latest/`.\nThis documentation is continually under development.\nPlease\
    \ contact the developers at `paws-developers@slac.stanford.edu`\nif the documentation fails to answer your questions.\n\n\nAPI Examples\n------------\n\nThe following are examples that explore \nthe\
    \ capabilities of the `paws` API.\n\nTODO: write new examples to reflect the new API.\n\n\nGUI Examples\n------------\n\nInstructions and examples for using `paws` through its `Qt`-based GUI\ncan be\
    \ found in the documentation. \nNOTE: this is currently false. \nTODO: add this to the docs. \n\nTo keep the package dependencies low,\nthe PAWS GUI modules are not supported \nby the PyPI package requirements.\n\
    Installing PySide (`pip install PySide`)\nshould provide support for the PAWS GUI.\nIn future releases, a GUI-enabled version \nmay be distributed as a separate package.\n\n\nInstallation\n------------\n\
    \nThe full `paws` package is available on PyPI.\nTo install in an existing Python environment, invoke `pip`:\n`pip install pypaws`\n\nAll of the dependencies of the `paws` Operations \nare not declared\
    \ as dependencies of `paws`.\nThis keeps the Python environment relatively lean\nand avoids installation overhead,\nbut it means that users will have to prepare their\nenvironments for the Operations\
    \ they want to use.\n\nThe documentation of `paws` includes instructions\nfor installing the dependencies of each Operation.\nNOTE: this is currently false. \nTODO: add this to the docs. \n\n\nAttribution\n\
    -----------\n\n`paws` was written at SSRL by Chris Tassone's research group.\nIf you use `paws` in your published research, \na citation would be appreciated.\n\nBefore citing `paws`, it is of primary\
    \ importance that you cite \nthe authors of the original work that produced your results: \nthis is almost certainly separate from the authors of `paws`.\nCitations for your specific operations can\
    \ be found\nby looking those operations up in the `paws` documentation.\nNOTE: this is currently false. \nTODO: add this to the docs. \n\nIf the documentation is unclear for the operations you need\
    \ to cite,\nplease contact us at `paws-developers@slac.stanford.edu`,\nand we will return the correct citation\nand fix the missing documentation.\n\nA proper citation for `paws` itself can be found\
    \ \nin the `paws` documentation.\nNOTE: this is currently false. \nTODO: add this to the docs. \n\n\nContribution\n------------\n\nContribution to `paws` is encouraged and appreciated.\nWhether you\
    \ are a researcher looking to contribute Operations to the `paws` library\nor a software developer looking to contribute to the platform itself,\nthe `paws` development team would love to hear from\
    \ you.\nGet in touch with the `paws` development team\nat `paws-developers@slac.stanford.edu`.\n\nFull details about contributing to `paws`\ncan be found in our online documentation.\nNOTE: this is\
    \ currently false. \nTODO: add this to the docs. \n\n\nLicense\n-------\n\nThe 3-clause BSD-like license attached to this software \ncan be found in the LICENSE file in the source code root directory."
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
